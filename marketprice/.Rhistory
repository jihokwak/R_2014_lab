library(twitteR)
library(KoNLP)
library(wordcloud)
library(tm)
# preparing data
library(arules)
read.transactions(file="",sep=",") # POS자료 읽어오기
data(Groceries);groceries<-Groceries
summary(groceries)
inspect(groceries[1:5]) # 5건의 거래(영수증)
itemFrequency(groceries[,1:3]) # 3개 상품의 지지도
itemFrequencyPlot(groceries,support=0.1)
itemFrequencyPlot(groceries,topN=20)
image(groceries[1:5])
image(sample(groceries,100))
# finding rules
apriori(groceries)
# default support=0.1,confidence=0.8
groceryrule<-apriori(groceries,parameter=list(support=0.006,confidence=0.25,minlen=2));groceryrule
# 퍼래미터 기준은 무엇일까요?
60/9835, 2개 상품 이상 조건
summary(groceryrule)
inspect(groceryrule[1:3]) # rule을 한번 보자
inspect(sort(groceryrule,by="lift")[1:5])
berryrule<-subset(groceryrule,items %in% "berries")
# %in% c("berries","yogurt") : 둘 중 하나
# %pin% "fruit" : tropical fruit or citrus fruit
# %ain% c("berries,"yogurt") : 둘다
inspect(berryrule)
# 그래프로 표현
library(arulesViz)
plot(berryrule,measure=c("support","confidence"),shading="lift",interactive=F)
plot(berryrule,measure=c("support","confidence"),shading="lift",interactive=T)
library(doMC)
registerDoMC()
library(sqldf)
sqldf("SELECT * FROM market_price LIMIT 5;")
library(sqldf)
sqldf("SELECT * FROM market_price LIMIT 5;")
install.packages("sqldf")
# shows built in data frames
data()
install.packages("sqldf")
library(sqldf)
sqldf("select * from iris limit 5")
install.packages("RMySQL")
sqldf(c("create table mytab(a real, b real)")
sqldf(c("create table mytab(a real, b real)")
sqldf(c("create table mytab(a real, b real)")
quotient
sqldf(c("create table mytab(a real, b real)"))
data()
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
install.packages("datasets")
data()
library(RMySQL)
sqldf("select a/b as quotient from DF")
library(sqldf)
sqldf("select a/b as quotient from DF")
library(RMySQL)
sqldf("select a/b as quotient from DF")
sqldf("select * from FLAMINGO.LOCALE")
sqldf("select * from broadleaf.BLG_CATALOG")
sqldf("select * from FLAMINGO.LOCALE")
sqldf("select * from FLAMINGO.LOCALE")
sqldf("select * from FLAMINGO.LOCALE")
sqldf("select * from FLAMINGO.LOCALE")
library(reshape2)
head(iris)
iris.melt <- melt(iris, id = "Species", value.name = "cm")
head(iris.melt)
ggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour = variable)) + scale_color_discrete("Species")
library(ggplot2)
ggplot(iris.melt, aes(Species, cm)) + geom_point(aes(colour = variable)) + scale_color_discrete("Species")
load("pew.RData")
head(raw)
load("pew.RData")
head(raw)
load("pew.RData")
rm(list = ls())
getwd()
setwd('/Users/jimanryu/Desktop/R/marketprice')
getwd()
dir()
load("pew.RData")
head(raw)
paw <- raw[, -c(8, 9, 10, 11)]
paw <- raw[, -c(8, 9, 10, 11)] ; paw
melted <- melt(paw, measure.vars = c(2, 3, 4, 5, 6, 7), variable.name = "income",
value.name = "freq")
head(melted)
tail(melted)
library(ggplot2)
ggplot(melted, aes(religion, freq)) + geom_bar(aes(fill = income), stat = "identity") +
theme(axis.text.x = element_text(angle = 45))
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
library("dplyr", lib.loc="~/Library/R/3.1/library")
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
melted <- dply(melted, .(religion), mutate, freq_sum = sum(freq))
library(dplyr)
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
?ddply
install.packages("ddply")
?ddply
??ddply
melted <- ddply(melted, .(religion), mutate, freq_sum = sum(freq))
melted <- ddply(melted, .(religion, income), summarise, freq_precent = freq/freq_sum)
ggplot(melted, aes(religion, freq_precent)) + geom_bar(aes(fill = income), stat = "identity") +
theme(axis.text.x = element_text(angle = 45))
ggplot(data = diamonds, aes(x=price))
ggplot(data = diamonds, aes(x=price))
theme(axis.text.x = element_text(angle = 90, vjust = 0.4))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
ggplot(data = diamonds, aes(x = price)) + geom_bar(aes(fill = cut), binwidth = 3000,
position = "fill") + xlab("가격") + ylab("빈도") + scale_fill_discrete("커팅") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4))
ggplot(data = diamonds, aes(x = price))
ggplot(data = diamonds, aes(x = price)) +
xlab("가격") + ylab("빈도") + scale_fill_discrete("커팅") +
theme(axis.text.x = element_text(angle = 90, vjust = 0.4))
ggplot(data = diamonds, aes(x = price)) +
xlab("가격") + ylab("빈도")
ggplot( data = diamonds,
aes(x = price)) +  geom_bar(aes(fill = cut)
xlab("가격") + ylab("빈도")
ggplot(data = diamonds, aes(x = price)) + geom_bar(aes(fill = cut), binwidth = 3000,
position = "fill") + xlab("가격") + ylab("빈도")
ggplot(data = diamonds, aes(x = price)) + geom_bar(aes(fill = cut), binwidth = 3000,
ggplot(data = diamonds, aes(x = price))
+ geom_bar(aes(fill = cut), binwidth = 3000)
+ xlab("가격") + ylab("빈도")
ggplot(data = diamonds, aes(x = price))
+ geom_bar(aes(fill = cut) )
+ xlab("가격") + ylab("빈도")
ggplot(data = diamonds, aes(x = price))
+ xlab("가격") + ylab("빈도")
library(caret)
data(iris)
TrainData <- iris[, 1:4]
TrainData <- iris[, 1:4];TrainData
TrainClasses <- iris[, 5];TrainClasses
TrainClasses <- iris[, 2];TrainClasses
TrainData <- iris[, 1:4];TrainData
TrainClasses <- iris[, 2];TrainClasses
knnFit1 <- train(TrainData, TrainClasses, method = "knn", preProcess = c("center",
print(knnFit1)
